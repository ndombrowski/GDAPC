{
  "hash": "847fc1c7ecc46b16111c40c0829d4599",
  "result": {
    "markdown": "# Data visualization in R\n\nSome useful packages for data vis in R are:\n\n- ggplot2 \n- Plotly \n- Lattice \n- RGL \n- Dygraphs \n- Leaflet \n- Highcharter \n- Patchwork \n- gganimate\n- ggridges\n\nIn ggplot2 an **aesthetic** is a visual property of an object in your plot. For example, in a scatter plot aesthetics include things like the size, shape or color of your data points. \n\nA **geom** refers to the geometric object used to represent your data. For example, you can use points to create a scatter plot, bars to create a bar chart, or lines to create a line diagram.\n\n**Facets** let you display smaller groups or subsets of your data. With facets, you can create separate plots for all the variables in your dataset.\n\nThe **label and annotate functions** let you customize your plot. You can add text like titles, subtitles and captions to communicate the purpose of your plot or highlight important data. \n\nThe grammar of graphics in ggplot2:\n\n- start with the ggplot function and choose a dataset to work with,\n- add a geom_function to display your data\n- map the variables you want to plot in the argument of the aes function\n\n```\nggplot(data=<DATA>) +\n    <GEOM_FUNCTION>(mapping=aes(<AESTHETIC MAPPINGS>))\n```\n\n\n## Getting started\n\nFirst let's load the data and have a look:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 8\n  species island    bill_length_mm bill_depth_mm flipper_l~1 body_~2 sex    year\n  <fct>   <fct>              <dbl>         <dbl>       <int>   <int> <fct> <int>\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema~  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema~  2007\n4 Adelie  Torgersen           NA            NA            NA      NA <NA>   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema~  2007\n6 Adelie  Torgersen           39.3          20.6         190    3650 male   2007\n# ... with abbreviated variable names 1: flipper_length_mm, 2: body_mass_g\n```\n:::\n:::\n\n\nSuppose you want to plot the relationship between body mass and flipper length in the three penguin species. You can choose a specific geom that fits the type of data you have. Points show the relationship between two quantitative variables. A scatterplot of points would be an effective way to display the relationship between the two variables. You can put flipper length on the x-axis and body mass on the y-axis. \n\nFor this we need:\n\n1. The **ggplot()** function, which creates a coordinate system that you can add layers to. The first argument of the ggplot() function is the dataset to use in the plot. In this case, it<e2><80><99>s `penguins`.\n2. You use a `+` symbol to add a new layer to your plot. You complete your plot by adding one or more layers to ggplot().\n3.  Add a **geom** function. The geom_point() function uses points to create scatterplots, the geom_bar function uses bars to create bar charts, and so on. Each geom function in ggplot2 takes **a mapping argument**. This defines how variables in your dataset are mapped to visual properties. The mapping argument is always paired with the **aes()** function. The x and y arguments of the aes() function specify which variables to map to the x-axis and the y-axis of the coordinate system. **Mapping** means matching up a specific variable in your dataset with a specific aesthetic. For example, you can map a variable to the x- axis of your plot, or you can map a variable to the y-axis of your plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins) +\n    geom_point(mapping = aes(x=flipper_length_mm, y = body_mass_g))\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-3-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nYou can write the same section of code above using a different syntax with the mapping argument inside the ggplot() call: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x=flipper_length_mm, y = body_mass_g)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-4-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n## Exploring aesthethics\n\nWe can map variables, as well as color, size and shape, to aesthetics. Let's add a third variable to our scatter plot by mapping it to a new aesthetic. We'll map the variable species to the aesthetic color by adding some code inside the parentheses of the aes function.\n\nUsing more than one aesthetic can also be a way to make your visuals more accessible because it gives your viewers more than one way to make sense of your data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x=flipper_length_mm, y = body_mass_g, color = species)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-5-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nWe can also use shape to highlight the different penguin species.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x=flipper_length_mm, y = body_mass_g, shape = species)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-6-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nIf we want we can map more than one aesthetic to the same variable. Let's map both color and shape to species. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x=flipper_length_mm, y = body_mass_g, shape = species, color = species)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-7-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nLet's add size as well and map three aesthetics to species. If we add size equal species, each colored shape will also be a different size.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x=flipper_length_mm, y = body_mass_g, shape = species, color = species, size = species)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-8-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nWe can also map species to the alpha aesthetic, which controls the transparency of the points. Alpha is a good option when you've got a dense plot with lots of data points.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x=flipper_length_mm, y = body_mass_g, alpha = species)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-9-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nYou can also set the aesthetic apart from a specific variable. Let's say we want to change the color of all the points to purple. Here we don't want to map color to a specific variable like species. We just want every point in our scatter plot to be purple. So we need to set our new piece of code outside of the aes function and use quotation marks for our color value. If we want to change the appearance of our overall plot without regard to specific variables, we write code outside of the aes function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x=flipper_length_mm, y = body_mass_g)) +\n    geom_point(color=\"purple\")\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-10-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n## Different geom functions\n\n### Smooting\n\nSmoothing enables the detection of a data trend even when you can't easily notice a trend from the plotted data points. Ggplot2<e2><80><99>s smoothing functionality is helpful because it adds a smoothing line as another layer to a plot; the smoothing line helps the data to make sense to a casual observer.\n\nTo change the type of plot, we can put **geom_smooth** in place of geom underscore point.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x=flipper_length_mm, y = body_mass_g)) +\n    geom_smooth(color=\"purple\")\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-11-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nInstead of points, there's a smooth line that fits the data. The geom underscore smooth function's useful for showing general trends in our data.\n\nWe can even use two geoms in the same plot. Let's say we want to show the relationship between the trend line and the data points more clearly.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x=flipper_length_mm, y = body_mass_g)) +\n    geom_point() +\n    geom_smooth(color=\"purple\")\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-12-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nLet's say we want to plot a separate line for each species of penguin. We can add the line type aesthetic to our code and map it to the variable species. Geom underscore smooth will draw a different line with a different line type for each species of penguin.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x=flipper_length_mm, y = body_mass_g)) +\n    geom_smooth(aes(linetype = species))\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-13-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nThere are two types of smoothing:\n\n- Loess smoothing: The loess smoothing process is best for smoothing plots with less than 1000 points.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x=flipper_length_mm, y = body_mass_g)) +\n    geom_smooth(method = \"loess\")\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-14-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n- Gam smoothing: Gam smoothing, or generalized additive model smoothing, is useful for smoothing plots with a large number of points.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x=flipper_length_mm, y = body_mass_g)) +\n    geom_smooth(method=\"gam\", formula = y ~s(x))\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-15-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n### Jittering\n\nThe **geom_jitter** function creates a scatter plot and then adds a small amount of random noise to each point in the plot. Jittering helps us deal with over-plotting, which happens when the data points in a plot overlap with each other. Jittering makes the points easier to find.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x=flipper_length_mm, y = body_mass_g)) +\n    geom_jitter()\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-16-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n### Barcharts\n\nFor this, lets work with the diamond dataset that is already part of the ggplot package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x=cut)) +\n    geom_bar()\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-17-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nNotice that we didn't supply a variable for the y-axis. When you use geom_bar, R automatically counts how many times each x-value appears in the data, and then shows the counts on the y-axis. The default for geom_bar is to count rows.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x=cut)) +\n    geom_bar()\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-18-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nGeom underscore bar uses several aesthetics that you're already familiar with, such as color, size, and alpha. Let's add the color aesthetic to our plot and map it to the variable cut. We write the code the same way as we did with scatter plots and add color equals cut after x equals cut. The color aesthetic adds color to the outline of each bar.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x=cut, color = cut)) +\n    geom_bar()\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-19-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nWe can use the fill aesthetic to add color to the inside of each bar. In our code, we put fill equals cut in place of color equals cut.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x=cut, fill = cut)) +\n    geom_bar()\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-20-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nIf we map fill to a new variable, geom underscore bar will display what's called a stacked bar chart. Let's map fill to clarity instead of cut.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x=cut, fill = clarity)) +\n    geom_bar()\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-21-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n## Aesthetics and facets\n\n**Facet functions** let you display smaller groups or subsets of your data. A facet is a side or section of an object, like the sides of a gemstone. Facets show different sides of your data by placing each subset on its own plot.\n\nFacet functions in ggplot2:\n\n- `Facet_wrap()`: To facet your plot by a single variable, use facet underscore wrap\n- `Facet_grid()`: facet your plot with two variables. `facet_grid` will include plots even if they are empty\n\n\n### Facet_wrap\n \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n    geom_point() +\n    facet_wrap(~species)\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-22-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nLet's try faceting the diamonds dataset. Earlier, we made a bar chart that showed the number of diamonds for each category of cut. Fair, good, very good, premium, and ideal. We can use facet underscore wrap on the cut variable to create a separate plot for each category of cut.\n \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x = color, fill = cut)) +\n    geom_bar() +\n    facet_wrap(~cut)\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-23-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Facet_grid\n \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n    geom_point() +\n    facet_grid(sex~species)\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-24-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nIf we want, we can focus our plot on only one of the two variables. For example, we can tell R to remove sex from the vertical dimension of the plot and just show species. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n    geom_point() +\n    facet_grid(~sex)\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-25-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n## Filtering and plots\n\nFiltering your data before you plot it allows you to focus on specific subsets of your data and gain more targeted insights. To do this, just include the dplyr filter() function in your ggplot syntax. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n    filter(species == \"Adelie\") |> \n    ggplot(aes(x = bill_length_mm, y = flipper_length_mm, colour = species)) + \n    geom_point(alpha = 0.3,  position = position_jitter()) + \n    stat_smooth(method = \"lm\")\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-26-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nWe can also filter using several categories:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n    filter(species == \"Adelie\") |> \n    filter(sex == \"female\") |> \n    ggplot(aes(x = bill_length_mm, y = flipper_length_mm, colour = species)) + \n    geom_point(alpha = 0.3,  position = position_jitter()) + \n    stat_smooth(method = \"lm\")\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-27-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n## Conditional coloring\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n    geom_point(aes(color = ifelse(flipper_length_mm > 200, \"red\", \"grey\"))) \n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-28-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n## Annotation layer\n\n### Titles, subtiles and labels\n\nTo **annotate** means to add notes to a document or diagram to explain or comment upon it.\n\nThe **label function** is useful for adding informative labels to a plot such as titles, subtitles, and captions. For example, we can add a title to our plot that shows the relationship between body mass and flipper length for the three penguin species. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n    geom_point() +\n    labs(title=\"Palmer Penguins: Body mass versus flipper length\")\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-29-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nWe can also add a subtitle to our plot to highlight important information about our data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n    geom_point() +\n    labs(title=\"Palmer Penguins: Body mass versus flipper length\",\n         subtitle = \"Sample of three penguin species\")\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-30-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nWe can add a caption to our plot in the same way. Captions let us show the source of our data. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n    geom_point() +\n    labs(title=\"Palmer Penguins: Body mass versus flipper length\",\n         subtitle = \"Sample of three penguin species\",\n         caption = \"Data collected by Dr. Kirsten Gorman\")\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-31-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nWe can also combine this with some variables, i.e. the min and max values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin_length <- min(penguins$flipper_length_mm, na.rm = TRUE)\nmax_length <- max(penguins$flipper_length_mm, na.rm = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n    geom_point() +\n    labs(title=\"Palmer Penguins: Body mass versus flipper length\",\n         subtitle = paste0(\"Min length: \", min_length, \" and max length: \", max_length))\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-33-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nNow you want to clean up the x and y axis labels to make sure they are really clear.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n    geom_point() +\n    labs(title=\"Palmer Penguins: Body mass versus flipper length\",\n         subtitle = paste0(\"Min length: \", min_length, \" and max length: \", max_length),\n         x = \"Flipper length (mm)\",\n         y = \"Body mass (g)\")\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-34-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n### Labelling data points inside the grid\n\nIf we want to put text inside the grid to call out specific data points, we can use the annotate function. For example, let's say we want to highlight the data from the Gentoo penguins. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n    geom_point() +\n    labs(title=\"Palmer Penguins: Body mass versus flipper length\",\n         subtitle = \"Sample of three penguin species\",\n         caption = \"Data collected by Dr. Kirsten Gorman\") +\n    #annotate has information on: the type of label, the location of the label and the context of the label\n    annotate(\"text\", x = 220, y = 3500, label = \"Gentoos are the largest\")\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-35-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nWe can customize our annotation even more. Let's say we want to change the color of our text.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n    geom_point() +\n    labs(title=\"Palmer Penguins: Body mass versus flipper length\",\n         subtitle = \"Sample of three penguin species\",\n         caption = \"Data collected by Dr. Kirsten Gorman\") +\n    #annotate has information on: the type of label, the location of the label and the context of the label\n    annotate(\"text\", x = 220, y = 3500, label = \"Gentoos are the largest\", color = \"purple\", fontface=\"bold\", size=4.5, angle = 25)\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-36-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nBy this point, our code is getting pretty long. If you want to use less code, you can store your plot as a variable in R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <-\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n    geom_point() +\n    labs(title=\"Palmer Penguins: Body mass versus flipper length\",\n         subtitle = \"Sample of three penguin species\",\n         caption = \"Data collected by Dr. Kirsten Gorman\")\n```\n:::\n\n\n\nNow, instead of writing all the code again, we can just call p and add an annotation to it like this.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + annotate(\"text\", x = 220, y = 3500, label = \"Gentoos are the largest\")\n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-38-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Saving your visualizations\n\nTo save our plots, we can use the Export option in the plots tab of RStudio or the ggsave function provided by the ggplot2 package.\n\n\n### Export\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n    geom_point() \n```\n\n::: {.cell-output-display}\n![](4_data_vis_in_R_files/figure-pdf/unnamed-chunk-39-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nLet's use the Export option in the plots tab to save our plot. We can save it as an image file or a PDF file. \n\n\n### Ggsave\n\nGgsave is a useful function for saving a plot. It defaults to saving the last plot that you displayed and uses the size of the current graphics device. Let's try saving our plot as a PNG file using ggsave.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"../output/Three_penguin_species.png\")\n```\n:::\n\n\n\n### Using a graphics device\n\nIn most cases, ggsave() is the simplest way to save your plot. But there are situations when it might be best to save your plot by writing it directly to a graphics device. \n\nA graphics device allows a plot to appear on your computer. Examples include:\n\n- A window on your computer (screen device)\n- A PDF, PNG, or JPEG file (file device)\n- An SVG, or scalable vector graphics file (file device)\n\nExample of using png():\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npng(file = \"../output/png_example.png\", bg = \"transparent\")\nplot(1:10)\nrect(1, 5, 3, 7, col = \"white\")\n\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npdf \n  2 \n```\n:::\n:::\n\n\n\nExample of using pdf():\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdf(file = \"../output/pdf_example.pdf\",    \n       width = 4,     \n       height = 4) \n\nplot(x = 1:10, y = 1:10)\nabline(v = 0)\ntext(x = 0, y = 1, labels = \"Random text\")\n\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npdf \n  2 \n```\n:::\n:::\n",
    "supporting": [
      "4_data_vis_in_R_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}