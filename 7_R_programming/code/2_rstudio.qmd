# Programming using RStudio

## Fundamentals

### Functions

**Functions** are a body of reusable code used to perform specific tasks in R. Functions begin with function names like print or paste, and are usually followed by one or more arguments in parentheses. An **argument** is information that a function in R needs in order to run. I.e. `print()` will return whatever we include in the values in parentheses.

```{r}
print("Coding in R")
```

If you want to find out more about the print function or any function, all you have to do is type a question mark, the function name, and a set of parentheses. This returns a page in the Help window, which helps you learn more about the functions you're working with. Keep in mind that functions are case-sensitive, so typing Print with a Capital P brings back an error message.

```{r}
?print()
```

Functions are great, but it can be pretty time-consuming to type out lots of values. To save time, we can use variables to represent the values. This lets us call out the values any time we need to with just the variable. A **variable** is a representation of a value in R that can be stored for use later during programming. Variables can also be called objects. A variable name should start with a letter and can also contain numbers and underscores. 


### Comments

Comments are helpful when you want to describe or explain what's going on in your code. Use them as much as possible so that you and everyone can understand the reasoning behind it. Comments should be used to make an R script more readable. A comment shouldn't be treated as code, so we'll put a # in front of it. Then we'll add our comment. Here's an example of a variable.

```{r}
# Here is an example of a variable
first_variable <- "My variable"
first_variable
```

Above the `<-`  is the **assignment operator**. It assigns the value to the variable.


### Data structures

A **data structure** is a format for organizing and storing data. The most common data structures in the R
programming language include:

- Vectors
- Data frames
- Matrices
- Arrays


### Vectors

A **vector** is a group of data elements of the same type stored in a sequence in R. 

There are two types of vectors: atomic vectors and lists. 

#### Atomic vectors

There are six primary types of atomic vectors: 

- Logical: True/False
- Integer: Positive or negative whole values
- Double: Decimal values
- Character: String/character values
- Complex
- Raw

Together, integer and double vectors are known as **numeric vectors** because they both contain numbers. 


#### Creating vectors

You can make a vector using the combined function. In R this function is just the letter c followed by the values you want in your vector inside parentheses, i.e. `c()`

```{r}
vec_1 <- c(13,48.5, 71, 101.5,2)
vec_1
```


#### Determining the properties of vectors 

Every vector you create will have two key properties: type and length.  

You can determine what type of vector you are working with by using the typeof() function. Place the code for the vector inside the parentheses of the function. When you run the function, R will tell you the type. For example: 

```{r}
typeof(vec_1)
```

You can determine the length of an existing vector–meaning the number of elements it contains–by using the length() function. 

```{r}
length(vec_1)
```

You can also check if a vector is a specific type by using an is function: is.logical(), is.double(), is.integer(), is.character(). 

```{r}
is.character(vec_1)
```


#### Naming vectors

All types of vectors can be named. Names are useful for writing readable code and describing objects in R. You can name the elements of a vector with the names() function. 

```{r}
# create a vector
x <- c(1, 3, 5)

#assign names to each element of a vector
names(x) <- c("a", "b", "c")

#view vector
x
```


### Lists

Lists are different from atomic vectors because their elements can be of any type—like dates, data frames, vectors, matrices, and more. Lists can even contain other lists. 

You can create a list with the list() function. Similar to the c() function, the list() function is just list followed by the values you want in your list inside parentheses.


#### Determining the structure of lists 

If you want to find out what types of elements a list contains, you can use the str() function. To do so, place the code for the list inside the parentheses of the function. 

```{r}
str(list("a", 1L, 1.5, TRUE))
```

Let’s use the str() function to discover the structure of our second example.  First, let’s assign the list to the variable z to make it easier to input in the str() function. 

```{r}
z <- list(list(list(1 , 3, 5)))
str(z)
```

The indentation of the $ symbols reflect the nested structure of this list. Here, there are three levels (so there is a list within a list within a list).  


#### Naming lists

Lists, like vectors, can be named. You can name the elements of a list when you first create it with the list() function:

```{r}
list('Chicago' = 1, 'New York' = 2, 'Los Angeles' = 3)
```


### Matrices

A matrix is a two-dimensional collection of data elements. This means it has both rows and columns. By contrast, a vector is a one-dimensional sequence of data elements. But like vectors, matrices can only contain a single data type. For example, you can’t have both logicals and numerics in a matrix. 

To create a matrix in R, you can use the matrix() function. The matrix() function has two main arguments that you enter in the parentheses. First, add a vector. The vector contains the values you want to place in the matrix. Next, add at least one matrix dimension. You can choose to specify the number of rows or the number of columns by using the code nrow = or ncol =. 

For example, imagine you want to create a 2x3 (two rows by three columns) matrix containing the values 3-8. First, enter a vector containing that series of numbers: c(3:8). Then, enter a comma. Finally, enter nrow = 2 to specify the number of rows. 

```{r}
matrix(c(3:8), nrow = 2)
```

You can also choose to specify the number of columns (ncol = ) instead of the number of rows (nrow = ). 

```{r}
matrix(c(3:8), ncol = 2)
```


### Data frames

Data frames are the most common way of storing and analyzing data in R, so it’s important to understand what they are and how to create them. A data frame is a collection of columns–similar to a spreadsheet or SQL table. Each column has a name at the top that represents a variable, and includes one observation per row. Data frames help summarize data and organize it into a format that is easy to read and use. 

There are a few key things to keep in mind when you are working with data frames: 

- Columns should be named. 
- Data frames can include many different types of data, like numeric, logical, or character.
- Elements in the same column should be of the same type.


#### Creating dfs

If you need to manually create a data frame in R, you can use the data.frame() function. The data.frame() function takes vectors as input. In the parentheses, enter the name of the column, followed by an equals sign, and then the vector you want to input for that column.

```{r}
data.frame(x = c(1, 2, 3) , y = c(1.5, 5.5, 7.5))
```



## Files

Let’s go over how to create, copy, and delete files in R. For more information on working with files in R.

Use the `dir.create` function to create a new folder, or directory, to hold your files. Place the name of the folder in the parentheses of the function. 

```
dir.create ("destination_folder")
```

Use the file.create() function to create a blank file. Place the name and the type of the file in the parentheses of the function. Your file types will usually be something like .txt, .docx, or .csv.  

```
file.create ("new_text_file.txt")
```

Copying a file can be done using the file.copy() function. In the parentheses, add the name of the file to be copied. Then, type a comma, and add the name of the destination folder that you want to copy the file to. 

```file.copy ("new_text_file.txt" , "destination_folder")```

You can delete R files using the unlink() function. Enter the file’s name in the parentheses of the function.

```unlink ("some_.file.csv")```




## Pipes

A **pipe** is a tool in R for expressing a sequence of multiple operations. A pipe is represented with `%>%`.It's used to apply the output of one function into another function.



## Packages

**Packages** are units of reproducible R code, and they make it easier to keep track of code. They're created by members of the R community to keep track of the R functions that they write and reuse

Packages in R include reusable R functions and documentation about the functions, including how to use them. They also contain sample datasets and tests for checking your code to make sure it does what you want it to do.

By default, R includes a set of packages called **Base R** that are available to use in RStudio when you start your first programming session. 

To check already installed packages we can type 

```{r}
packages <- as.data.frame(installed.packages())
head(packages)
```

The package column gives the name of the package like cluster or graphics. The priority column tells us what's needed to use functions from the package. If you come across the word "base" in the priority column, then the package is already installed and loaded.

Packages can be found in repositories, which are collections of useful packages that are ready to install. You can find repositories on Bioconductor, R-Forge, rOpenSci, or GitHub, but the most commonly used repository is the Comprehensive R Archive Network or CRAN. CRAN stores code and documentation so that you can install packages into your own RStudio space. 

Conflicts happen when packages have functions with the same names as other functions. Basically, the last package loaded is the one whose functions will be used


## Dates and times in R

In this reading, you will learn how to work with dates and times in R using the lubridate package. Lubridate is part of tidyverse. 

```{r}
#| warning: false

#load required libs
library(tidyverse)
library(lubridate)
```

In R, there are three types of data that refer to an instant in time:

- A date ("2016-08-16")
- A time within a day ("20:11:59 UTC")
- And a date-time. This is a date plus a time ("2018-03-31 18:15:48 UTC")

For example, to get the current date you can run the today() function. The date appears as year, month, and day. 

```{r}
today()
```

To get the current date-time you can run the now() function. Note that the time appears to the nearest second. 

```{r}
now()
```

When working with R, there are three ways you are likely to create date-time formats: 

- From a string
- From an individual date
- From an existing date/time object

R creates dates in the standard yyyy-mm-dd format by default. 

### Converting from strings 

Date/time data often comes as strings. You can convert strings into dates and date-times using the tools provided by lubridate. These tools automatically work out the date/time format. First, identify the order in which the year, month, and day appear in your dates. Then, arrange the letters y, m, and d in the same order. That gives you the name of the lubridate function that will parse your date.

```{r}
ymd("2021-01-20")
```

It works the same way for any order. For example, month, day, and year. R still returns the date in yyyy-mm-dd format.

```{r}
mdy("January 20th, 2021")
```

These functions also take unquoted numbers and convert them into the yyyy-mm-dd format.

```{r}
ymd(20210120)
```

### Creating date-time components

The ymd() function and its variations create dates. To create a date-time from a date, add an underscore and one or more of the letters h, m, and s (hours, minutes, seconds) to the name of the function:

```{r}
ymd_hms("2021-01-20 20:11:59")
```

```{r}
mdy_hm("01/20/2021 08:01")
```

### Optional: Switching between existing date-time objects 

Finally, you might want to switch between a date-time and a date. 

You can use the function as_date() to convert a date-time to a date. For example, put the current date-time—now()—in the parentheses of the function. 

```{r}
as_date(now())
```



## Operators and calculations

**Operators** are defined as a symbol that names the type of operation or calculation to be performed in a formula. Arithmetic operators are used to complete math calculations.

**Arithmetic operators** let you perform basic math operations like addition, subtraction, multiplication, and division.

<img width=500 src="../images/operators.png">

In the example above, we assume that `x <- 2` and `y <-5`

```{r}
quarter_1_sales <- 35657.98
quarter_2_sales <- 43810.55
midyear_sales <- quarter_1_sales + quarter_2_sales
midyear_sales
```

**Logical operators** return a logical data type such as TRUE or FALSE. 
There are three primary types of logical operators:

<img width=500 src="../images/log_operators.png">

The main difference between **element-wise logical operators** (&, |) and **logical operators** (&&, ||) is the way they apply to operations with vectors. The operations with double signs, AND (&&) and logical OR (||), only examine the first element of each vector. The operations with single signs, AND (&) and OR (|), examine all the elements of each vector. 

```{r}
x <- c(3, 5, 7)
y <- c(2, 4, 6)

x < 5 & y < 5
```

```{r}
x < 5 && y < 5
```



**Relational operators**, also known as comparators, allow you to compare values. Relational operators identify how one R object relates to another—like whether an object is less than, equal to, or greater than another object. The output for relational operators is either TRUE or FALSE (which is a logical data type, or boolean).

<img width=500 src="../images/rel_operators.png">


**Assignment operators** let you assign values to variables. 

In many scripting programming languages you can just use the equal sign (=) to assign a variable. For R, the best practice is to use the arrow assignment (<-). Technically, the single arrow assignment can be used in the left or right direction. But the rightward assignment is not generally used in R code. 



## Conditional statements

A **conditional statement** is a declaration that if a certain condition holds, then a certain event must take place.

### if statement
The if statement sets a condition, and if the condition evaluates to TRUE, the R code associated with the if statement is executed.

In R, you place the code for the condition inside the parentheses of the if statement. The code that has to be executed if the condition is TRUE follows in curly braces (expr). Note that in this case, the second curly brace is placed on its own line of code and identifies the end of the code that you want to execute. 
```
if (condition) {
 expr
}
```

```{r}
x <- 4

if (x > 0) {
    print("x is a positive number")
}
```

if you change x to a negative number, like -4, then the condition will be FALSE (-4 > 0). If you run the code, R will not execute the print statement. Instead, a blank line will appear as the result.


### else statement

The else statement is used in combination with an if statement. This is how the code is structured in R: 

```
if (condition) {
  expr1
} else {
 expr2
}
```

Let's try the following: 

- If x is greater than 0, R will print “x is a positive number”.
- If x is less than or equal to 0, R will print “x is either a negative number or zero”.

```{r}
x <- -7

if (x > 0) {
    print("x is a positive number")
} else {
    print("x is either a negative number or zero")
}
```

### else if statement

In some cases, you might want to customize your conditional statement even further by adding the else if statement. The else if statement comes in between the if statement and the else statement. This is the code structure: 

```
if (condition1) {
 expr1
} else if (condition2) {
 expr2
} else {
 expr3
}
```

If the if condition (condition1) is met, then R executes the code in the first expression (expr1). If the if condition is not met, and the else if condition (condition2) is met, then R executes the code in the second expression (expr2). If neither of the two conditions are met, R executes the code in the third expression (expr3). 

In our previous example, using only the if and else statements, R can only print “x is either a negative number or zero” if x equals 0 or x is less than zero. Imagine you want R to print the string “x is zero” if x equals 0. You need to add another condition using the else if statement.


```{r}
x <- -1

if (x < 0) {
    print("x is a negative number")
} else if (x == 0) {
    print("x is zero")
} else {
    print("x is a positive number")
}
```

## Keeping Your Code Readable

- File names should be meaningful
- Avoid using special characters in file names—stick with numbers,letters, dashes, and underscores.
- Variable and function names should be lowercase. Use an underscore _ to separate words within a name. Try to create names that are clear, concise, and meaningful.
- Most operators (== , + , - , <- ,etc.) should be surrounded by spaces.
- Always put a space after a comma (never before).
- Do not place spaces around code in parentheses or square brackets (unless there’s a comma, in which case see above).
- An opening curly brace should never go on its own line and should always be followed by a new line. A closing curly brace should always go on its own line (unless it’s followed by an else statement). Always indent the code inside curly braces.
- When indenting your code, use two spaces. Do not use tabs or mix tabs and spaces.
- Try to limit your code to 80 characters per line. This fits nicely on a printed page with a reasonably sized font.
- Use <- , not = , for assignment.
- Entire commented lines should begin with the comment symbol and a single space: #.



## Viewing data

Many of the `tidyverse` packages contain sample datasets that you can use to practice your `R` skills. The `diamonds` dataset in the `ggplot2` package is a great example for previewing `R` functions. 

```{r}
head(diamonds)
```
In addition to `head()` there are a number of other useful functions you can use to summarize or preview the data. For example, the `str()` and `glimpse()` functions will both return summaries of each column in your data arranged horizontally. You can try out these two functions by running the code chunks below:

```{r}
str(diamonds)
```

```{r}
glimpse(diamonds)
```
Another simple function that you may use regularly is the `colnames()` function. It returns a list of column names from your dataset. You can check out this function by running the code chunk below:

```{r}
colnames(diamonds)
```


## Cleaning data

One of the most frequent tasks you will have to perform as an analyst is to clean and organize your data. `R` makes this easy! There are many functions you can use to help you perform important tasks easily and quickly. 

For example, you might need to rename the columns, or variables, in your data. There is a function for that: `rename().` You can check out how it works in the chunk below:

```{r}
rename(diamonds, carat_new = carat)
```
You can rename more than one variable in the same `rename()` code. The code below demonstrates how:

```{r}
rename(diamonds, carat_new = carat, cut_new = cut)
```

Another handy function for summarizing your data is `summarize().` You can use it to generate a wide range of summary statistics for your data. For example, if you wanted to know what the mean for `carat` was in this dataset, you could run the code in the chunk below:

```{r}
summarize(diamonds, mean_carat = mean(carat))
```
## Visualizing data

With `R,` you can create data visualizations that are simple and easy to understand or complicated and beautiful just by changing a bit of code. `R` empowers you to present the same data in so many different ways, which can help you create new insights or highlight important data findings.  One of the most commonly used visualization packages is the `ggplot2` package, which is loaded automatically when you install and load `tidyverse.`

To build a visualization with `ggplot2` you layer plot elements together with a `+` symbol. You will learn a lot more about using `ggplot2` later in the course, but here is a preview of how easy and flexible it is to make visuals using code:

```{r}
ggplot(data = diamonds, aes(x = carat, y = price)) +
  geom_point()
```

The code above takes the `diamonds` data, plots the carat column on the X-axis, the price column on the Y-axis, and represents the data as a scatter plot using the `geom_point()` command. 

`ggplot2` makes it easy to modify or improve your visuals. For example, if you wanted to change the color of each point so that it represented another variable, such as the cut of the diamond, you can change the code like this:

```{r}
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
  geom_point()
```

Sometimes when you are trying to represent many different aspects of your data in a visual, it can help to separate out some of the components. For example, you could create a different plot for each type of cut. `ggplot2` makes it easy to do this with the `facet_wrap()` function:

```{r}
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
  geom_point() +
    facet_wrap(~cut)
```


## The tidyverse

Tidyverse is actually a collection of packages in R with a common design philosophy for data manipulation, exploration, and visualization. 

The packages are ggplot2, tibble, tidyr, readr, purrr, dplyr, stringr, and forcats.

- **readr** is used for importing data
- **Ggplot2** is used for data visualization, specifically plots. With ggplot2, you can create a variety of data viz by applying different visual properties to the data variables.
- **Tidyr** is a package used for data cleaning to make tidy data
- **Dplyr** offers a consistent set of functions that help you complete some common data manipulation tasks. For example, the select function picks variables based on their names, and the filter function finds cases where certain conditions are true
- **Tibble** works with data frames. 
- **Purrr** works with functions and vectors helping make your code easier to write and more expressive. 
- **Stringr** includes functions that make it easier to work with strings.
- **Forcats** provides tools that solve common problems with factors. As a quick reminder, factors store categorical data in R where the data values are limited and usually based on a finite group like country or year.


### Checking for updates

```{r}
#tidyverse_update()
```



### Read tidyverse vignettes 

A vignette is documentation that acts as a guide to an R package. A vignette shares details about the problem that the package is designed to solve and how the included functions can help you solve it. The browseVignettes function allows you to read through vignettes of a loaded package.

```{r}
#browseVignettes("ggplot2")
```



### Working with pipes

**Nested** describes code that performs a particular function and is contained within code that performs a broader function. 

```{r}
#load an already installed dataset
data("ToothGrowth")
head(ToothGrowth)
```
Now, let's say we need to filter and sort this data to organize it for analysis. 


```{r}
#apply the filter fct from the dplyr package
#to only include rows were the dose of vitamin is 0.5
filtered_tg <- filter(ToothGrowth, dose == 0.5)

#check dimensions
dim(ToothGrowth)
dim(filtered_tg)
```

Next, lets sort the data with the `arrange()` fct.

```{r}
#first we have the df, then the column we want to sort by
arrange(filtered_tg, len)
```

Let's now use a nested function to do this:

```{r}
arrange(filter(ToothGrowth, dose == 0.5), len)
```
Notice that the filter function from our previous code is the nested function. With nested functions, we read from the inside out. The code filters the data first. Then it arranges or sorts it.

Now, let's use a pipe:

The shortcut to enter a pipe is `cmd+shift+m`

```{r}
filtered_toothgrowh <- ToothGrowth |> 
    filter(dose==0.5) |> 
    arrange(len)

filtered_toothgrowh
```

Building on our example, let's say we also wanted to compute the average tooth length or len for each of the two supplements used in the study: orange juice or OJ and ascorbic acid or VC.

```{r}
filtered_toothgrowh <- ToothGrowth |> 
    filter(dose==0.5) |> 
    #group by tooth supplements
    group_by(supp) |> 
    #summarize data by group
    summarise(mean_len = mean(len, na.rm = T), .group = "drop")

filtered_toothgrowh
```
